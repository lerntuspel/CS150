# -*- coding: utf-8 -*-
"""Drawing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bWdxSRE_hpOb7xvSHVD6ujJPwrCxn7sx

# The new Drawing module (this will replace the old picture module)

We can save this in a drawing.py file and have them upload it to their notebooks, instead of copying and pasting this code each time.

I renamed this as "Drawing" so that it has a different name from the module for working with image files, meaning that we do not need to have picture and picture2 modules, anymore.  I thought Drawing made more sense in the context of how students use it at the start of the semester.
"""

"""Credit to https://gist.github.com/korakot/8409b3feec20f159d8a50b0a811d3bca for ideas"""

from IPython.display import HTML, Image, Javascript
from google.colab import output


# The HTML needed to create a new canvas
canvas_html = """
<canvas id=NAME width=WIDTH height=HEIGHT></canvas>
<script>
var NAME = document.getElementById('NAME');
var NAME_ctx = NAME.getContext('2d');
</script>
"""

# The HTML needed to draw a (non-filled) rectangle in a canvas
rectangle_html = """
<script>
VAR.beginPath();
VAR.strokeRect(X, Y, WIDTH, HEIGHT);
VAR.stroke();
</script>
"""

# The HTML needed to draw a (filled) rectangle in a canvas
fill_rectangle_html = """
<script>
VAR.beginPath();
VAR.fillRect(X, Y, WIDTH, HEIGHT);
VAR.strokeRect(X, Y, WIDTH, HEIGHT);
VAR.stroke();
</script>
"""

# The HTML needed to change the fill color in a canvas
change_fill_color_html = """
<script>
VAR.fillStyle = 'COLOR';
</script>
"""

# The HTML needed to change the stroke color in a canvas
change_stroke_color_html = """
<script>
VAR.strokeStyle = 'COLOR';
</script>
"""

# The HTML needed to draw a line
line_html = """
<script>
VAR.beginPath();
VAR.moveTo(STARTX, STARTY);
VAR.lineTo(ENDX, ENDY);
VAR.stroke();
</script>
"""

# The HTML needed to draw a (non-filled) circle
circle_html = """
<script>
VAR.beginPath();
VAR.arc(X, Y, RAD, 0, 2*Math.PI);
VAR.stroke();
</script>
"""

# The HTML needed to draw a (filled) circle
circle_fill_html = """
<script>
VAR.beginPath();
VAR.arc(X, Y, RAD, 0, 2*Math.PI);
VAR.fill();
</script>
"""

# The HTML needed to draw a (non-filled) oval
oval_html = """
<script>
VAR.beginPath();
VAR.moveTo(STARTX, MIDDLEY);
VAR.bezierCurveTo(STARTX, MIDDLEY - CONTROLY, MIDDLEX - CONTROLX, STARTY, MIDDLEX, STARTY);
VAR.bezierCurveTo(MIDDLEX + CONTROLX, STARTY, ENDX, MIDDLEY - CONTROLY, ENDX, MIDDLEY);
VAR.bezierCurveTo(ENDX, MIDDLEY + CONTROLY, MIDDLEX + CONTROLX, ENDY, MIDDLEX, ENDY);
VAR.bezierCurveTo(MIDDLEX - CONTROLX, ENDY, STARTX, MIDDLEY + CONTROLY, STARTX, MIDDLEY);
VAR.stroke();
</script>
"""

# The HTML needed to draw a (filled) oval
fill_oval_html = """
<script>
VAR.beginPath();
VAR.moveTo(STARTX, MIDDLEY);
VAR.bezierCurveTo(STARTX, MIDDLEY - CONTROLY, MIDDLEX - CONTROLX, STARTY, MIDDLEX, STARTY);
VAR.bezierCurveTo(MIDDLEX + CONTROLX, STARTY, ENDX, MIDDLEY - CONTROLY, ENDX, MIDDLEY);
VAR.bezierCurveTo(ENDX, MIDDLEY + CONTROLY, MIDDLEX + CONTROLX, ENDY, MIDDLEX, ENDY);
VAR.bezierCurveTo(MIDDLEX - CONTROLX, ENDY, STARTX, MIDDLEY + CONTROLY, STARTX, MIDDLEY);
VAR.fill();
</script>
"""

# The HTML needed to set the line width
set_line_width_html = """
<script>
VAR.lineWidth = LINE_WIDTH;
</script>
"""

# The HTML needed to get the line width
get_line_width_html = """
<script>
window.line_width = VAR.lineWidth;
</script>
"""

# The HTML needed to get the canvas width
get_width_html = """
<script>
window.canvas_width = NAME.width;
</script>
"""

# The HTML needed to get the canvas height
get_height_html = """
<script>
window.canvas_height = NAME.height;
</script>
"""


class Drawing():
  # The running number of canvases already created
  number = 0


  def __init__(self, width, height):
    # save the parameters
    self.width = width
    self.height = height
    self.name = "can" + str(Drawing.number)      # the name of the canvas object
    self.var = self.name + "_ctx"        # the name of the canvas variable in JS

    # draw the canvas
    html = canvas_html.replace("NAME", self.name) \
                      .replace("WIDTH", str(width)) \
                      .replace("HEIGHT", str(height))
    display(HTML(html))

    # start the canvas as a big white rectangle so that it has some pixels
    self.setOutlineColor(255, 255, 255)
    self.setFillColor(255, 255, 255)
    self.drawRectFill(0, 0, self.width, self.height)

    # default to a black outline
    self.setOutlineColor(0, 0, 0)

    # update the number of canvases so each is a unique name/var
    Drawing.number += 1


  def drawLine(self, startX, startY, endX, endY):
    html = line_html.replace("STARTX", str(startX)) \
                        .replace("STARTY", str(startY)) \
                        .replace("ENDX", str(endX)) \
                        .replace("ENDY", str(endY)) \
                        .replace("VAR", self.var)
    display(HTML(html))


  def drawRect(self, x, y, width, height):
    html = rectangle_html.replace("X", str(x)) \
                         .replace("Y", str(y)) \
                         .replace("WIDTH", str(width)) \
                         .replace("HEIGHT", str(height)) \
                         .replace("VAR", self.var)
    display(HTML(html))


  def drawRectFill(self, x, y, width, height):
    html = fill_rectangle_html.replace("X", str(x)) \
                              .replace("Y", str(y)) \
                              .replace("WIDTH", str(width)) \
                              .replace("HEIGHT", str(height)) \
                              .replace("VAR", self.var)
    display(HTML(html))


  def drawSquare(self, x, y, side):
    html = rectangle_html.replace("X", str(x)) \
                         .replace("Y", str(y)) \
                         .replace("WIDTH", str(side)) \
                         .replace("HEIGHT", str(side)) \
                         .replace("VAR", self.var)
    display(HTML(html))


  def drawSquareFill(self, x, y, side):
    html = fill_rectangle_html.replace("X", str(x)) \
                              .replace("Y", str(y)) \
                              .replace("WIDTH", str(side)) \
                              .replace("HEIGHT", str(side)) \
                              .replace("VAR", self.var)
    display(HTML(html))


  def drawCircle(self, x, y, r):
    html = circle_html.replace("X", str(x)) \
                         .replace("Y", str(y)) \
                         .replace("RAD", str(r)) \
                         .replace("VAR", self.var)
    display(HTML(html))


  def drawCircleFill(self, x, y, r):
    html = circle_fill_html.replace("X", str(x)) \
                         .replace("Y", str(y)) \
                         .replace("RAD", str(r)) \
                         .replace("VAR", self.var)
    display(HTML(html))


  # credit to https://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
  # for most of these details
  def drawOval(self, x, y, width, height):
      kappa = .5522848
      startX = x - width / 2.0
      startY = y - height / 2.0
      controlX = width / 2.0 * kappa
      controlY = height / 2.0 * kappa
      endX = startX + width
      endY = startY + height

      html = oval_html.replace("STARTX", str(startX)) \
                      .replace("STARTY", str(startY)) \
                      .replace("CONTROLX", str(controlX)) \
                      .replace("CONTROLY", str(controlY)) \
                      .replace("MIDDLEX", str(x)) \
                      .replace("MIDDLEY", str(y)) \
                      .replace("ENDX", str(endX)) \
                      .replace("ENDY", str(endY)) \
                      .replace("VAR", self.var)
      display(HTML(html))


  # credit to https://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
  # for most of these details
  def drawOvalFill(self, x, y, width, height):
      kappa = .5522848
      startX = x - width / 2.0
      startY = y - height / 2.0
      controlX = width / 2.0 * kappa
      controlY = height / 2.0 * kappa
      endX = startX + width
      endY = startY + height

      html = fill_oval_html.replace("STARTX", str(startX)) \
                      .replace("STARTY", str(startY)) \
                      .replace("CONTROLX", str(controlX)) \
                      .replace("CONTROLY", str(controlY)) \
                      .replace("MIDDLEX", str(x)) \
                      .replace("MIDDLEY", str(y)) \
                      .replace("ENDX", str(endX)) \
                      .replace("ENDY", str(endY)) \
                      .replace("VAR", self.var)
      display(HTML(html))


  def drawPolygon(self, points):
    html = self._createPolygonHTML(points)
    html += self.var + ".stroke();</script>"
    display(HTML(html))


  def drawPolygonFill(self, points):
    html = self._createPolygonHTML(points)
    html += self.var + ".fill();</script>"
    display(HTML(html))


  def _createPolygonHTML(self, points):
    html = "<script>"
    html += self.var + ".beginPath(); "
    html += self.var + ".moveTo(%d, %d); " % (points[0][0], points[0][1])

    for i in range(1, len(points)):
      html += self.var + ".lineTo(%d, %d); " % (points[i][0], points[i][1])

    html += self.var + ".lineTo(%d, %d); " % (points[0][0], points[0][1])
    return html


  def setFillColor(self, red, green, blue):
    color = "#" + self._toHex(red) + self._toHex(green) + self._toHex(blue)
    html = change_fill_color_html.replace("COLOR", color) \
                                 .replace("VAR", self.var)
    display(HTML(html))


  def setOutlineColor(self, red, green, blue):
    color = "#" + self._toHex(red) + self._toHex(green) + self._toHex(blue)
    html = change_stroke_color_html.replace("COLOR", color) \
                                 .replace("VAR", self.var)
    display(HTML(html))


  def setLineWidth(self, width):
    html = set_line_width_html.replace("LINE_WIDTH", str(width)) \
                          .replace("VAR", self.var)
    display(HTML(html))


  def getLineWidth(self):
    html = get_line_width_html.replace("VAR", self.var)
    display(HTML(html))
    return output.eval_js('line_width')


  def _toHex(self, number):
    s = str(hex(number))[2:].upper()
    if len(s) == 1:
      return "0" + s
    else:
      return s

  def getWidth(self):
    html = get_width_html.replace("NAME", self.name)
    display(HTML(html))
    return output.eval_js('canvas_width')


  def getHeight(self):
    html = get_height_html.replace("NAME", self.name)
    display(HTML(html))
    return output.eval_js('canvas_height')
